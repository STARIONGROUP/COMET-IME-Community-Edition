// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ReqIfExportDialogViewModel.cs" company="Starion Group S.A.">
//    Copyright (c) 2015-2022 Starion Group S.A.
//
//    Author: Sam Gerené, Alex Vorobiev, Alexander van Delft, Nathanael Smiechowski, Antoine Théate, Omar Elebiary
//
//    This file is part of COMET-IME Community Edition.
//    The COMET-IME Community Edition is the Starion Concurrent Design Desktop Application and Excel Integration
//    compliant with ECSS-E-TM-10-25 Annex A and Annex C.
//
//    The COMET-IME Community Edition is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Affero General Public
//    License as published by the Free Software Foundation; either
//    version 3 of the License, or any later version.
//
//    The COMET-IME Community Edition is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program. If not, see http://www.gnu.org/licenses/.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace CDP4Requirements.ViewModels
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Reactive;
    using System.Reactive.Linq;
    using System.Threading;
    using System.Threading.Tasks;

    using CDP4Common.CommonData;
    using CDP4Common.EngineeringModelData;
    using CDP4Common.SiteDirectoryData;

    using CDP4Composition.Mvvm;
    using CDP4Composition.Navigation;
    using CDP4Composition.Views;

    using CDP4Dal;

    using CDP4Requirements.ReqIFDal;

    using DevExpress.Mvvm;

    using ReactiveUI;

    using ReqIFSharp;

    /// <summary>
    /// The view-model to export the <see cref="RequirementsSpecification"/>s of an <see cref="Iteration"/>
    /// </summary>
    public class ReqIfExportDialogViewModel : DialogViewModelBase, ISupportServices
    {
        /// <summary>
        /// Backing field for <see cref="Path"/>
        /// </summary>
        private string path;

        /// <summary>
        /// Backing field for <see cref="SelectedIteration"/>
        /// </summary>
        private ReqIfExportIterationRowViewModel selectedIteration;

        /// <summary>
        /// The <see cref="IOpenSaveFileDialogService"/>
        /// </summary>
        private IOpenSaveFileDialogService fileDialogService;

        /// <summary>
        /// The <see cref="IReqIFSerializer"/>
        /// </summary>
        private readonly IReqIFSerializer serializer;

        /// <summary>
        /// Backing field for <see cref="IsDetailExpanded"/>
        /// </summary>
        private bool isDetailExpanded;

        /// <summary>
        /// Backing field for <see cref="ErrorDetailMessage"/>
        /// </summary>
        private string errorDetailMessage;

        /// <summary>
        /// Backing field for <see cref="IsCancelButtonVisible"/>
        /// </summary>
        private bool isCancelButtonVisible;

        /// <summary>
        /// The <see cref="CancellationTokenSource"/> used to stop execution
        /// of the <see cref="Task"/> that executes the <see cref="Action"/>
        /// </summary>
        private CancellationTokenSource cancellationTokenSource;

        /// <summary>
        /// The <see cref="System.Threading.CancellationToken"/> generated by the cancellationTokenSource
        /// in order to stop the <see cref="Task"/> that executes the <see cref="Action"/>
        /// </summary>
        private CancellationToken cancellationToken;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReqIfExportDialogViewModel"/> class
        /// </summary>
        /// <param name="sessions">The list of <see cref="ISession"/> available</param>
        /// <param name="iterations">The list of <see cref="Iteration"/> available</param>
        /// <param name="fileDialogService">The <see cref="IOpenSaveFileDialogService"/></param>
        /// <param name="serializer">The <see cref="IReqIFSerializer"/></param>
        public ReqIfExportDialogViewModel(IEnumerable<ISession> sessions, IEnumerable<Iteration> iterations, IOpenSaveFileDialogService fileDialogService, IReqIFSerializer serializer)
        {
            if (sessions == null)
            {
                throw new ArgumentNullException("sessions");
            }

            if (iterations == null)
            {
                throw new ArgumentNullException("iterations");
            }

            if (fileDialogService == null)
            {
                throw new ArgumentNullException("fileDialogService");
            }

            if (serializer == null)
            {
                throw new ArgumentNullException("serializer");
            }

            this.Sessions = sessions.ToList();
            this.Iterations = new ReactiveList<ReqIfExportIterationRowViewModel>();
            this.fileDialogService = fileDialogService;
            this.serializer = serializer;

            foreach (var iteration in iterations)
            {
                this.Iterations.Add(new ReqIfExportIterationRowViewModel(iteration));
            }

            var canOk = this.WhenAnyValue(
                vm => vm.Path,
                vm => vm.SelectedIteration,
                (path, iteration) => iteration != null && !string.IsNullOrEmpty(path));

            this.OkCommand = ReactiveCommandCreator.CreateAsyncTask(this.ExecuteOk, canOk);

            this.OkCommand.ThrownExceptions.Select(ex => ex).Subscribe(
                x =>
            {
                this.ErrorMessage = x.Message;
            });

            this.BrowseCommand = ReactiveCommandCreator.Create(this.ExecuteBrowse);

            this.CancelCommand = ReactiveCommandCreator.Create(this.ExecuteCancel);

            this.OnClosingCommand = ReactiveCommandCreator.CreateAsyncTask<object>(this.OnClosing);

            this.CancelReqIfCommand = ReactiveCommandCreator.Create();

            this.CancelReqIfCommand.Subscribe(_ =>
            {
                this.cancellationTokenSource?.Cancel();
                this.LoadingMessage = "Cancelling...";
            });
        }

        /// <summary>
        /// Gets a value indicating whether the Cancel button is visible on the <see cref="LoadingControl"/>
        /// </summary>
        public bool IsCancelButtonVisible
        {
            get => this.isCancelButtonVisible;
            set => this.RaiseAndSetIfChanged(ref this.isCancelButtonVisible, value);
        }

        /// <summary>
        /// Gets or sets a value indicating whether the error message detail should be displayed
        /// </summary>
        public bool IsDetailExpanded
        {
            get => this.isDetailExpanded;
            set => this.RaiseAndSetIfChanged(ref this.isDetailExpanded, value);
        }

        /// <summary>
        /// Gets the detail of the error message
        /// </summary>
        public string ErrorDetailMessage
        {
            get => this.errorDetailMessage;
            private set => this.RaiseAndSetIfChanged(ref this.errorDetailMessage, value);
        }

        /// <summary>
        /// Gets the <see cref="ISession"/>
        /// </summary>
        public List<ISession> Sessions { get; private set; }

        /// <summary>
        /// Gets the <see cref="Iteration"/> row-representation
        /// </summary>
        public ReactiveList<ReqIfExportIterationRowViewModel> Iterations { get; private set; }

        /// <summary>
        /// Gets or sets the selected iteration to export
        /// </summary>
        public ReqIfExportIterationRowViewModel SelectedIteration
        {
            get => this.selectedIteration;
            set => this.RaiseAndSetIfChanged(ref this.selectedIteration, value);
        }

        /// <summary>
        /// Gets or sets the Path
        /// </summary>
        public string Path
        {
            get => this.path;
            set => this.RaiseAndSetIfChanged(ref this.path, value);
        }

        /// <summary>
        /// Gets the <see cref="ICommand"/> to cancel creation of a ReqIf file
        /// </summary>
        public ReactiveCommand<Unit, Unit> CancelReqIfCommand { get; private set; }

        /// <summary>
        /// Gets the OnClosing Command
        /// </summary>
        public ReactiveCommand<object, Unit> OnClosingCommand { get; private set; }

        /// <summary>
        /// Gets the Ok Command
        /// </summary>
        public ReactiveCommand<Unit, Unit> OkCommand { get; private set; }

        /// <summary>
        /// Gets the Cancel Command
        /// </summary>
        public ReactiveCommand<Unit, Unit> CancelCommand { get; private set; }

        /// <summary>
        /// Gets the Browse Command
        /// </summary>
        public ReactiveCommand<Unit, Unit> BrowseCommand { get; private set; }

        /// <summary>
        /// Executes the Ok Command
        /// </summary>
        public async Task ExecuteOk()
        {
            this.IsBusy = true;
            this.LoadingMessage = "Exporting...";
            this.ErrorMessage = string.Empty;
            this.ErrorDetailMessage = string.Empty;
            this.IsCancelButtonVisible = true;

            this.cancellationTokenSource = new CancellationTokenSource();
            this.cancellationToken = this.cancellationTokenSource.Token;

            this.cancellationToken.ThrowIfCancellationRequested();

            try
            {
                this.LoadingMessage = "Pre checking model validity...";

                if (!await Task.Run(this.CheckModelValidity, this.cancellationToken))
                {
                    this.ErrorMessage = "The model contains errors that need to be fixed before exporting the requirements.";
                    return;
                }

                this.LoadingMessage = "Building ReqIf file...";
                var reqif = await Task.Run(this.BuildReqIf, this.cancellationToken);

                this.LoadingMessage = $"Writing ReqIf file {this.Path}...";
                await Task.Run(() => this.serializer.Serialize(reqif, this.Path, (sender, args) => { }), this.cancellationToken);

                this.DialogResult = new BaseDialogResult(true);
            }
            catch (TaskCanceledException)
            {
                this.ErrorMessage = "ReqIf creation was cancelled.";
            }
            catch (Exception ex)
            {
                this.ErrorMessage = ex.Message;
            }
            finally
            {
                this.LoadingMessage = string.Empty;
                this.IsBusy = false;
                this.IsCancelButtonVisible = false;
            }
        }

        /// <summary>
        /// Build a <see cref="ReqIF"/> object
        /// </summary>
        /// <returns>an waitable <see cref="Task{T}"/> of type <see cref="ReqIF"/></returns>
        private async Task<ReqIF> BuildReqIf()
        {
            return await Task.Run(
                () =>
                {
                    var session = this.Sessions.Single(x => x.Assembler.Cache == this.SelectedIteration.Iteration.Cache);
                    var reqifBuilder = new ReqIFBuilder();

                    return reqifBuilder.BuildReqIF(session, this.SelectedIteration.Iteration);
                },
                this.cancellationToken);
        }

        /// <summary>
        /// Check the validity of the model
        /// </summary>
        /// <returns>True if no violations related to the exported data were found</returns>
        private async Task<bool> CheckModelValidity()
        {
            var iteration = this.SelectedIteration.Iteration;

            if (iteration.Container is not EngineeringModel model)
            {
                this.ErrorMessage = "The container of the selected Iteration is not set.";
                return false;
            }

            var rules = model.RequiredRdls.SelectMany(x => x.Rule).OfType<ParameterizedCategoryRule>();
            var violations = new List<RuleViolation>();

            var thingsToCheck = new List<Guid>();
            await this.AddThingsToCheck(iteration, thingsToCheck);

            foreach (var parameterizedCategoryRule in rules)
            {
                violations.AddRange(parameterizedCategoryRule.Verify(iteration).Where(v => v.ViolatingThing.Intersect(thingsToCheck).Any()));
            }

            this.ErrorDetailMessage = string.Join(Environment.NewLine, violations.Select(v => v.Description));

            return !violations.Any();
        }

        /// <summary>
        /// Populate the <paramref name="thingsToCheck"/>
        /// </summary>
        /// <param name="iteration">The <see cref="Iteration"/></param>
        /// <param name="thingsToCheck">The collection of <see cref="Guid"/></param>
        private async Task AddThingsToCheck(Iteration iteration, List<Guid> thingsToCheck)
        {
            var relationships = iteration.Relationship
                .OfType<BinaryRelationship>()
                .Where(
                    x =>
                        (x.Source.ClassKind == ClassKind.Requirement || x.Source.ClassKind == ClassKind.RequirementsSpecification || x.Source.ClassKind == ClassKind.RequirementsGroup) &&
                        (x.Target.ClassKind == ClassKind.Requirement || x.Target.ClassKind == ClassKind.RequirementsSpecification || x.Target.ClassKind == ClassKind.RequirementsGroup));

            foreach (var requirementsSpecification in iteration.RequirementsSpecification)
            {
                thingsToCheck.Add(requirementsSpecification.Iid);
                await this.AddThingsToVerify(requirementsSpecification, thingsToCheck);

                foreach (var requirement in requirementsSpecification.Requirement)
                {
                    thingsToCheck.Add(requirement.Iid);
                }
            }

            thingsToCheck.AddRange(relationships.Select(x => x.Iid));
        }

        /// <summary>
        /// Populate the <paramref name="thingsToCheck"/>
        /// </summary>
        /// <param name="reqContainer">The <see cref="RequirementsContainer"/></param>
        /// <param name="thingsToCheck">The collection of <see cref="Guid"/> to populate</param>
        private async Task AddThingsToVerify(RequirementsContainer reqContainer, List<Guid> thingsToCheck)
        {
            foreach (var group in reqContainer.Group)
            {
                thingsToCheck.Add(group.Iid);
                await this.AddThingsToVerify(group, thingsToCheck);
            }
        }

        /// <summary>
        /// Executes the Cancel Command
        /// </summary>
        private void ExecuteCancel()
        {
            this.DialogResult = new BaseDialogResult(false);
        }

        /// <summary>
        /// Executes the Cancel Command
        /// </summary>
        private void ExecuteBrowse()
        {
            this.Path = this.fileDialogService.GetSaveFileDialog("Untitled", ".reqif", "ReqIF files (.reqif)|*.reqif", this.Path, 1);
        }

        /// <summary>
        /// Handles the window's OnClosing event.
        /// </summary>
        /// <param name="obj">The <see cref="CancelEventArgs"/></param>
        public async Task OnClosing(object obj)
        {
            await Task.Run(() => this.cancellationTokenSource?.Cancel());
        }

        private IServiceContainer serviceContainer;

        public IServiceContainer ServiceContainer
        {
            get { return this.serviceContainer ??= new ServiceContainer(this); }
        }
    }
}
